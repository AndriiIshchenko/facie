import os
import sys
import logging
from typing import Dict, Optional
from pathlib import Path

import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)

# Add bot directory to Python path for local imports
sys.path.insert(0, str(Path(__file__).parent))

# Initialize centralized logging from local config
from logging_config import setup_logging, get_logger

setup_logging(service_name="bot")
logger = get_logger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BACKEND_BASE_URL = os.getenv("BACKEND_BASE_URL", "http://localhost:8000")

if TELEGRAM_BOT_TOKEN is None or TELEGRAM_BOT_TOKEN.strip() == "":
    raise ValueError("TELEGRAM_BOT_TOKEN is not set in the environment variables!")

PHOTO, NAME, PROFESSION, DESCRIPTION = range(4)

user_data_storage: Dict[int, dict] = {}


def get_friends() -> dict:
    """Get a list of all friends from the backend"""
    try:
        response = requests.get(f"{BACKEND_BASE_URL}/friends", timeout=10)
        response.raise_for_status()
        return {"success": True, "data": response.json()}
    except requests.exceptions.RequestException as e:
        logger.error("Error getting friends: %s", e)
        return {"success": False, "error": str(e)}


def get_friend_by_id(friend_id: int) -> dict:
    """Get a friend by ID"""
    try:
        response = requests.get(f"{BACKEND_BASE_URL}/friends/{friend_id}", timeout=10)
        response.raise_for_status()
        return {"success": True, "data": response.json()}
    except requests.exceptions.RequestException as e:
        logger.error("Error getting friend %s: %s", friend_id, e)
        return {"success": False, "error": str(e)}


def create_friend(
    photo_path: str, name: str, profession: str, description: Optional[str] = None
) -> dict:
    """Create a new friend via API"""
    try:
        with open(photo_path, "rb") as photo_file:
            # Explicitly set the content type as image/jpeg
            files = {"photo": ("photo.jpg", photo_file, "image/jpeg")}
            data = {
                "name": name,
                "profession": profession,
            }
            if description:
                data["profession_description"] = description

            response = requests.post(
                f"{BACKEND_BASE_URL}/friends", files=files, data=data, timeout=10
            )
            response.raise_for_status()
            return {"success": True, "data": response.json()}
    except requests.exceptions.RequestException as e:
        logger.error("Error creating friend: %s", e)
        return {"success": False, "error": str(e)}
    except Exception as e:
        logger.error("Unexpected error: %s", e)
        return {"success": False, "error": str(e)}


def ask_llm(friend_id: int, question: str) -> dict:
    """Ask a question about a friend's profession"""
    try:
        response = requests.post(
            f"{BACKEND_BASE_URL}/friends/{friend_id}/ask",
            json={"question": question},
            timeout=15
        )
        response.raise_for_status()
        return {"success": True, "data": response.json()}
    except requests.exceptions.RequestException as e:
        logger.error("Error asking LLM: %s", e)
        return {"success": False, "error": str(e)}


async def start(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    """Command /start"""
    if not update.message:
        # Handle cases where there is no message in the update
        logger.warning("Update does not contain a message.")
        return

    user = update.effective_user
    if not user:
        await update.message.reply_text(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
        )
        return

    welcome_message = (
        f"üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑—ñ–≤.\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/addfriend - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –¥—Ä—É–∑—ñ–≤\n"
        "/friend <id> - –ü–æ–∫–∞–∑–∞—Ç–∏ –¥—Ä—É–≥–∞ –∑–∞ ID\n"
        "/ask <id> <–ø–∏—Ç–∞–Ω–Ω—è> - –ó–∞–ø–∏—Ç–∞—Ç–∏ –ø—Ä–æ –ø—Ä–æ—Ñ–µ—Å—ñ—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        "/cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é"
    )
    await update.message.reply_text(welcome_message)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Command /help"""
    if not update.message:
        logger.warning("Update does not contain a message.")
        return

    help_text = (
        "üìö *–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞—Ö:*\n\n"
        "**/addfriend** - –î–æ–¥–∞—Ç–∏ –¥—Ä—É–≥–∞\n"
        "–ü–æ–∫—Ä–æ–∫–æ–≤–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π:\n"
        "1Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ\n"
        "2Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è\n"
        "3Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ—Ñ–µ—Å—ñ—é\n"
        "4Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å)\n\n"
        "**/list** - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –¥—Ä—É–∑—ñ–≤\n"
        "–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –∑ —ñ–º–µ–Ω–∞–º–∏ —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ—è–º–∏\n\n"
        "**/friend <id>** - –ü–æ–∫–∞–∑–∞—Ç–∏ –¥—Ä—É–≥–∞\n"
        "–ü—Ä–∏–∫–ª–∞–¥: `/friend 1`\n\n"
        "**/ask <id> <–ø–∏—Ç–∞–Ω–Ω—è>** - –ó–∞–ø–∏—Ç–∞—Ç–∏ –ø—Ä–æ –ø—Ä–æ—Ñ–µ—Å—ñ—é\n"
        "–ü—Ä–∏–∫–ª–∞–¥: `/ask 1 –Ø–∫—ñ –æ—Å–Ω–æ–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –≤ —Ü—ñ–π –ø—Ä–æ—Ñ–µ—Å—ñ—ó?`\n"
        "üí° –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ—Ñ–µ—Å—ñ—é\n\n"
        "**/cancel** - –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")


async def list_friends(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Command /list - show all friends"""
    if not update.message:
        # Handle cases where there is no message in the update
        logger.warning("Update does not contain a message.")
        return

    await update.message.reply_text("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ–≤...")

    result = get_friends()

    if not result["success"]:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É:\n{result['error']}"
        )
        return

    friends = result["data"]

    if not friends:
        await update.message.reply_text(
            "üì≠ –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à–æ–≥–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /addfriend"
        )
        return

    message = "üë• *–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ–≤:*\n\n"
    for friend in friends:
        message += (
            f"üÜî ID: `{friend['id']}`\n"
            f"üë§ –Ü–º'—è: *{friend['name']}*\n"
            f"üíº –ü—Ä–æ—Ñ–µ—Å—ñ—è: {friend['profession']}\n"
        )
        if friend.get("profession_description"):
            message += f"üìù –û–ø–∏—Å: _{friend['profession_description']}_\n"
        message += "\n"

    message += "\nüí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `/friend <id>` –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"

    await update.message.reply_text(message, parse_mode="Markdown")


async def show_friend(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Command /friend <id> - show a specific friend"""
    if not update.message:
        logger.warning("Update does not contain a message.")
        return

    if not context.args:
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –¥—Ä—É–≥–∞.\n–ü—Ä–∏–∫–ª–∞–¥: `/friend 1`",
            parse_mode="Markdown",
        )
        return

    try:
        friend_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
        return

    await update.message.reply_text(f"üîç –®—É–∫–∞—é –¥—Ä—É–≥–∞ –∑ ID {friend_id}...")

    result = get_friend_by_id(friend_id)

    if not result["success"]:
        await update.message.reply_text(
            f"‚ùå –î—Ä—É–≥–∞ –∑ ID {friend_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞:\n{result['error']}"
        )
        return

    friend = result["data"]

    details = (
        f"üë§ *{friend['name']}*\n\n"
        f"üÜî ID: `{friend['id']}`\n"
        f"üíº –ü—Ä–æ—Ñ–µ—Å—ñ—è: {friend['profession']}\n"
    )

    if friend.get("profession_description"):
        details += f"üìù –û–ø–∏—Å: {friend['profession_description']}\n"

    details += f"\nüîó –§–æ—Ç–æ: {BACKEND_BASE_URL}{friend['photo_url']}"

    await update.message.reply_text(details, parse_mode="Markdown")

    try:
        photo_url = f"{BACKEND_BASE_URL}{friend['photo_url']}"
        await update.message.reply_photo(photo=photo_url)
    except Exception as e:
        logger.error("Cannot upload photo: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ")


async def ask_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Command /ask <id> <question> - ask about friend's profession"""
    if not update.message:
        logger.warning("Update does not contain a message.")
        return

    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå Formato: /ask <id> <question>\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /ask 1 –Ø–∫—ñ –æ—Å–Ω–æ–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –≤ —Ü—ñ–π –ø—Ä–æ—Ñ–µ—Å—ñ—ó?",
            parse_mode="Markdown",
        )
        return

    try:
        friend_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
        return

    # Join remaining args as the question
    question = " ".join(context.args[1:])

    if not question or len(question) > 500:
        await update.message.reply_text(
            "‚ùå –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 500 —Å–∏–º–≤–æ–ª—ñ–≤!"
        )
        return

    await update.message.reply_text(f"ü§î –û–±—Ä–æ–±–ª—è—é –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –¥—Ä—É–≥–∞ #{friend_id}...")

    result = ask_llm(friend_id, question)

    if not result["success"]:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result['error']}"
        )
        return

    answer = result["data"].get("answer", "No answer received")
    await update.message.reply_text(f"üí¨ *–í—ñ–¥–ø–æ–≤—ñ–¥—å:*\n\n{answer}", parse_mode="Markdown")


async def add_friend_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start the process of adding a friend"""
    if not update.message or not update.effective_user:
        logger.warning("Update does not contain a message or user.")
        return ConversationHandler.END

    user_id = update.effective_user.id
    user_data_storage[user_id] = {}

    await update.message.reply_text(
        "üì∏ –ö—Ä–æ–∫ 1/4: –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥—Ä—É–≥–∞\n\n" "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è",
        reply_markup=ReplyKeyboardRemove(),
    )
    return PHOTO


async def add_friend_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process photo"""
    if not update.message or not update.effective_user:
        logger.warning("Update does not contain a message or user.")
        return ConversationHandler.END

    user_id = update.effective_user.id

    photo_file = await update.message.photo[-1].get_file()

    photo_path = f"temp_photo_{user_id}.jpg"
    await photo_file.download_to_drive(photo_path)

    user_data_storage[user_id]["photo_path"] = photo_path

    await update.message.reply_text(
        "‚úÖ –§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n" "üë§ –ö—Ä–æ–∫ 2/4: –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –¥—Ä—É–≥–∞"
    )
    return NAME


async def add_friend_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process name"""
    if not update.message or not update.effective_user:
        logger.warning("Update does not contain a message or user.")
        return ConversationHandler.END

    user_id = update.effective_user.id
    name = update.message.text.strip() if update.message.text else ""

    if not name or len(name) > 255:
        await update.message.reply_text(
            "‚ùå –Ü–º'—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 1 –¥–æ 255 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return NAME

    user_data_storage[user_id]["name"] = name

    await update.message.reply_text(
        f"‚úÖ –Ü–º'—è: {name}\n\n" "üíº –ö—Ä–æ–∫ 3/4: –í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ—Ñ–µ—Å—ñ—é –¥—Ä—É–≥–∞"
    )
    return PROFESSION


async def add_friend_profession(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Process profession"""
    if not update.message or not update.effective_user:
        logger.warning("Update does not contain a message or user.")
        return ConversationHandler.END

    user_id = update.effective_user.id
    profession = update.message.text.strip() if update.message.text else ""

    if not profession or len(profession) > 255:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ—Ñ–µ—Å—ñ—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 1 –¥–æ 255 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return PROFESSION

    user_data_storage[user_id]["profession"] = profession

    keyboard = [["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, one_time_keyboard=True, resize_keyboard=True
    )

    await update.message.reply_text(
        f"‚úÖ –ü—Ä–æ—Ñ–µ—Å—ñ—è: {profession}\n\n"
        "üìù –ö—Ä–æ–∫ 4/4: –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø—Ä–æ—Ñ–µ—Å—ñ—ó (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)\n\n"
        "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'",
        reply_markup=reply_markup,
    )
    return DESCRIPTION


async def add_friend_description(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Process description and create friend"""
    if not update.message or not update.effective_user:
        logger.warning("Update does not contain a message or user.")
        return ConversationHandler.END

    user_id = update.effective_user.id
    description = update.message.text.strip() if update.message.text else ""

    if description.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        user_data_storage[user_id]["description"] = description

    await update.message.reply_text(
        "‚è≥ –°—Ç–≤–æ—Ä—é—é –¥—Ä—É–≥–∞...", reply_markup=ReplyKeyboardRemove()
    )

    data = user_data_storage[user_id]

    result = create_friend(
        photo_path=data["photo_path"],
        name=data["name"],
        profession=data["profession"],
        description=data.get("description", ""),
    )

    try:
        os.remove(data["photo_path"])
    except OSError as e:
        logger.error("Cannot delete temporary photo: %s", e)

    del user_data_storage[user_id]

    if result["success"]:
        friend = result["data"]
        success_message = (
            "‚úÖ *–î—Ä—É–≥–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!*\n\n"
            f"üÜî ID: `{friend['id']}`\n"
            f"üë§ –Ü–º'—è: *{friend['name']}*\n"
            f"üíº –ü—Ä–æ—Ñ–µ—Å—ñ—è: {friend['profession']}\n"
        )
        if friend.get("profession_description"):
            success_message += f"üìù –û–ø–∏—Å: {friend['profession_description']}\n"

        await update.message.reply_text(success_message, parse_mode="Markdown")
        await update.message.reply_text(
            "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /list –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –¥—Ä—É–∑—ñ–≤"
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥—Ä—É–≥–∞:\n{result['error']}\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ—é /addfriend"
        )

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è"""
    if not update.message or not update.effective_user:
        logger.warning("Update does not contain a message or user.")
        return ConversationHandler.END

    user_id = update.effective_user.id

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ —è–∫—â–æ —ñ—Å–Ω—É—î
    if user_id in user_data_storage:
        if "photo_path" in user_data_storage[user_id]:
            try:
                os.remove(user_data_storage[user_id]["photo_path"])
            except Exception as e:
                logger.error(f"Cannot delete temporary photo: {e}")
        del user_data_storage[user_id]

    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END


def main() -> None:
    """Start the bot"""
    logger.info("Starting Telegram bot...")
    logger.info("Backend URL: %s", BACKEND_BASE_URL)

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Conversation handler –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥—Ä—É–≥–∞
    add_friend_handler = ConversationHandler(
        entry_points=[CommandHandler("addfriend", add_friend_start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, add_friend_photo)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_friend_name)],
            PROFESSION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_friend_profession)
            ],
            DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_friend_description)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("list", list_friends))
    application.add_handler(CommandHandler("friend", show_friend))
    application.add_handler(CommandHandler("ask", ask_command))
    application.add_handler(add_friend_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (long polling)
    logger.info("Bot started! Press Ctrl+C to stop.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
